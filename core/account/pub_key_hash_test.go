package account

import (
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestNewUserPubKeyHash(t *testing.T) {
	expect := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c})

	publicKey := []uint8([]byte{0xd7, 0x23, 0x82, 0x25, 0xaa, 0x81, 0x1f, 0x4d, 0xf6, 0xae, 0x31, 0x35, 0x60, 0xfc, 0x81, 0x7, 0x8, 0x8b, 0x3b, 0x87, 0x25, 0xae, 0xf3, 0xec, 0x62, 0xde, 0xa8, 0x88, 0xbc, 0x1e, 0x93, 0xa4, 0xc9, 0xac, 0xfa, 0x27, 0x83, 0xf4, 0x69, 0x61, 0x57, 0xb5, 0x82, 0xe6, 0x62, 0xd0, 0x18, 0x5c, 0xdd, 0x28, 0xbf, 0xe4, 0x5c, 0xb5, 0xd7, 0xe3, 0xb5, 0x43, 0xd, 0x20, 0xac, 0x73, 0x58, 0x15})
	content := newUserPubKeyHash(publicKey)
	assert.Equal(t, expect, []byte(content))
}

func TestNewContractPubKeyHash(t *testing.T) {
	pkh := newContractPubKeyHash()
	assert.Equal(t, versionContract, pkh[0])
}

func TestPubKeyHash_IsContract(t *testing.T) {
	tests := []struct {
		name        string
		pubKeyHash  []byte
		expectedRes bool
		expectedErr error
	}{
		{
			name:        "ContractAddress",
			pubKeyHash:  []byte{versionContract},
			expectedRes: true,
			expectedErr: nil,
		},
		{
			name:        "UserAddress",
			pubKeyHash:  []byte{versionUser},
			expectedRes: false,
			expectedErr: nil,
		},
		{
			name:        "InvalidAddress",
			pubKeyHash:  []byte{0x00},
			expectedRes: false,
			expectedErr: ErrInvalidPubKeyHashVersion,
		},
		{
			name:        "EmptyAddress",
			pubKeyHash:  []byte{},
			expectedRes: false,
			expectedErr: ErrEmptyPublicKeyHash,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pkh := PubKeyHash(tt.pubKeyHash)
			res, err := pkh.IsContract()
			assert.Equal(t, tt.expectedRes, res)
			assert.Equal(t, tt.expectedErr, err)
		})
	}
}

func TestPubKeyHash_IsValid(t *testing.T) {
	validPubKey := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c})
	invalidPubKey := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c, 0x00})

	assert.True(t, PubKeyHash(validPubKey).IsValid())
	assert.False(t, PubKeyHash(invalidPubKey).IsValid())
}

func TestPubKeyHash_GenerateAddress(t *testing.T) {
	pubKey := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c})
	expected := Address{address: "dVaFsQL9He4Xn4CEUh1TCNtfEhHNHKX3hs"}
	assert.Equal(t, expected, PubKeyHash(pubKey).GenerateAddress())
}

func TestGeneratePubKeyHash(t *testing.T) {
	pubKey := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c})
	pubKeyHash := generatePubKeyHash(pubKey)
	assert.Equal(t, []byte{118,190,241,208,155,158,113,47,115,229,101,237,223,142,29,219,129,187,19,126}, pubKeyHash)
}

func TestIsValidPubKey(t *testing.T) {
	pubKey1 := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c})
	var pubKey2 []byte = nil
	pubKey3 := []uint8([]byte{versionUser, 0xb1, 0x34, 0x4c, 0x17, 0x67, 0x4c, 0x18, 0xd1, 0xa2, 0xdc, 0xea, 0x9f, 0x17, 0x16, 0xe0, 0x49, 0xf4, 0xa0, 0x5e, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	isPubKey1Valid, err1 := IsValidPubKey(pubKey1)
	isPubKey2Valid, err2 := IsValidPubKey(pubKey2)
	isPubKey3Valid, err3 := IsValidPubKey(pubKey3)

	assert.False(t, isPubKey1Valid)
	assert.Equal(t, errors.New("public key not correct"),err1)

	assert.False(t, isPubKey2Valid)
	assert.Equal(t, errors.New("public key not correct"),err2)

	assert.True(t, isPubKey3Valid)
	assert.Nil(t, err3)
}
